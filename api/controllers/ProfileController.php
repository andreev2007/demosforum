<?php

namespace api\controllers;

use common\models\PostsSearch;
use common\models\Subscriber;
use common\models\User;
use common\models\UserSearch;
use Yii;
use yii\data\ActiveDataProvider;
use yii\filters\AccessControl;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\rest\ActiveController;
use yii\web\Controller;
use yii\web\ForbiddenHttpException;
use yii\web\NotFoundHttpException;
use yii\web\Response;

/**
 * Site controller
 */
class ProfileController extends ActiveController
{
    public $modelClass = 'common\models\User';

    public function behaviors()
    {
        $behaviors = parent::behaviors();

        $behaviors['authenticator']['only'] = [
            'update',
            'settings',
            'liked',
            'starred',
            'commented',
            'subscribers',
            'subscribed',
            'subscribe',
            'un-subscribe',
        ];
        $behaviors['authenticator']['authMethods'] = [
            HttpBasicAuth::className(),
            HttpBearerAuth::className(),
        ];

        $behaviors['access'] = [
            'class' => AccessControl::className(),
            'only' => ['subscribe', 'un-subscribe'],
            'rules' => [
                [
                    'allow' => true,
                    'roles' => ['@'],
                ],
            ],
        ];

        return $behaviors;
    }

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actions()
    {
        $actions = parent::actions();

        $actions['index']['prepareDataProvider'] = [$this, 'prepareDataProvider'];

        return $actions;
    }

    public function prepareDataProvider()
    {
        $searchModel = new UserSearch();
        return $searchModel->search(Yii::$app->request->queryParams);
    }

    public function checkAccess($action, $model = null, $params = [])
    {
        if (in_array($action, ['update'])) {
            if (Yii::$app->user->id != $model->id) {
                throw new ForbiddenHttpException();
            }
        }
        if (in_array($action, ['subscribe', 'un-subscribe'])) {
            if (Yii::$app->user->isGuest) {
                throw new ForbiddenHttpException();
            }
        }
    }


    public function actionView($id)
    {
        $user = User::findOne($id);

        return [
            'user' => $user
        ];
    }

    public function actionLiked()
    {
        $user = Yii::$app->user->identity;
        $dataProvider = new ActiveDataProvider(
            [
                'query' => $user->getLikedPosts()
            ]
        );

        return [
            'user' => $user,
            'dataProvider' => $dataProvider,
        ];
    }

    public function actionSettings()
    {
        $user = User::findOne(Yii::$app->user->id);

        return [
            'user' => $user
        ];
    }

    public function actionStarred()
    {
        $user = User::findOne(Yii::$app->user->id);
        $dataProvider = new ActiveDataProvider(
            [
                'query' => $user->getStarredPosts()
            ]
        );

        return [
            'user' => $user,
            'dataProvider' => $dataProvider,
        ];
    }

    public function actionCommented()
    {
        $user = Yii::$app->user->identity;
        $dataProvider = new ActiveDataProvider(
            [
                'query' => $user->getCommentedPosts()
            ]
        );

        return [
            'user' => $user,
            'dataProvider' => $dataProvider,
        ];
    }

    public function actionSubscribed()
    {
        $user = Yii::$app->user->identity;
        $dataProvider = new ActiveDataProvider(
            [
                'query' => $user->getSubscribed()
            ]
        );

        return [
            'user' => $user,
            'dataProvider' => $dataProvider,
        ];
    }

    public function actionSubscribers()
    {
        $user = Yii::$app->user->identity;
        $dataProvider = new ActiveDataProvider(
            [
                'query' => $user->getSubscribers()
            ]
        );

        return [
            'user' => $user,
            'dataProvider' => $dataProvider,
        ];
    }


    public function actionSubscribe($id)
    {
        $params = ['user_id' => $id, 'subscriber_id' => Yii::$app->user->id];
        if ($model = Subscriber::findOne($params)) {
            Yii::$app->response->setStatusCode(404);
            return [
                'subscribersCount' => User::findOne($id)->getSubscribersCount(),
            ];
        } else {
            $model = new Subscriber($params);
            $model->save();
            Yii::$app->response->setStatusCode(201);
            return [
                'subscribersCount' => User::findOne($id)->getSubscribersCount()
            ];
        }
    }

    public function actionUnSubscribe($id)
    {
        $params = ['user_id' => $id, 'subscriber_id' => Yii::$app->user->id];
        if ($model = Subscriber::findOne($params)) {
            $model->delete();
            Yii::$app->response->setStatusCode(201);
            return [
                'subscribersCount' => User::findOne($id)->getSubscribersCount()
            ];
        } else {
            Yii::$app->response->setStatusCode(404);
            return [
                'subscribersCount' => User::findOne($id)->getSubscribersCount()
            ];
        }

    }

    /**
     * Finds the Comments model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Comments the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = User::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
