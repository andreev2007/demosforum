<?php

namespace api\controllers;

use backend\widgets\FlashAlert;
use common\models\Comments;
use common\models\PostLikes;
use common\models\Posts;
use common\models\PostsSearch;
use common\models\Reposts;
use common\models\User;
use common\models\UserSaved;
use frontend\models\ResendVerificationEmailForm;
use frontend\models\VerifyEmailForm;
use yii\filters\AccessControl;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\helpers\Url;
use Yii;
use yii\base\InvalidArgumentException;
use yii\data\ActiveDataProvider;
use yii\rest\ActiveController;

use yii\filters\VerbFilter;
use yii\web\ForbiddenHttpException;
use yii\web\NotFoundHttpException;
use yii\web\Response;
use yii\web\ServerErrorHttpException;

/**
 * Site controller
 */
class PostsController extends ActiveController
{
    public $modelClass = 'common\models\Posts';

    public function behaviors()
    {
        $behaviors = parent::behaviors();

       $behaviors['authenticator']['authMethods'] = [
            HttpBasicAuth::className(),
            HttpBearerAuth::className(),
        ];

        return $behaviors;
    }

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actions()
    {
        $actions = parent::actions();

        $actions['index']['prepareDataProvider'] = [$this, 'prepareDataProvider'];

        return $actions;
    }

    public function prepareDataProvider()
    {
        $searchModel = new PostsSearch;
        return $searchModel->search(Yii::$app->request->queryParams);
    }

    public function checkAccess($action, $model = null, $params = [])
    {
        if (in_array($action, ['update', 'delete'])) {
            if(!Yii::$app->authManager->getRole('admin')) {
                throw new ForbiddenHttpException('Forbidden');
            }
        }
    }

    public function actionCreate(){
        $model = new Posts();
        $model->created_by = Yii::$app->user->id;
        $model->load(Yii::$app->getRequest()->getBodyParams(), '');
        if ($model->save()) {
            $response = Yii::$app->getResponse();
            $response->setStatusCode(201);
            $id = implode(',', array_values($model->getPrimaryKey(true)));
            $response->getHeaders()->set('Location', Url::toRoute(['view', 'id' => $id], true));
        } elseif (!$model->hasErrors()) {
            throw new ServerErrorHttpException('Failed to create the object for unknown reason');
        }
        return $model;
    }

    public function actionDelete($id)
    {
        if ($this->findModel($id)->created_by !== Yii::$app->user->id) {
            return [
                'message' => 'Error'
            ];
        } else {
            $this->findModel($id)->delete();
            return [
                'message' => 'Successfully deleted'
            ];
        }
    }

    public function actionView($id)
    {
        $post = Posts::findOne($id);
        $comment = Comments::addComment($id);
        $comments = $post->getComments()
            ->with('children')
            ->andWhere(['status' => 10])
            ->andWhere(['parent_id' => null])->orderBy(['created_at' => SORT_DESC])->all();

        if ($comment->load(Yii::$app->request->post()) && $comment->save()) {
            Yii::$app->session->setFlash('success', ' Комментарий успешно сохранен!');
            return $this->refresh();
        } else {
            Yii::error($comment->errors);
        }

        Yii::error($comment->toArray());
        return $this->render('view', [
            'model' => $post,
            'comment' => $comment,
            'comments' => $comments,
        ]);
    }

    public function actionShare($id)
    {
        $post = Posts::findOne($id);
        if (Yii::$app->request->isPost) {
            if ($post->load(Yii::$app->request->post(), '') && $post->save()) {

            }
        }

        $repostersId = Reposts::find()->where(['post_id' => $id])->select('owner_id')->column();
        return $this->render('share', [
            'model' => $post,
            'repostersId' => $repostersId,
        ]);
    }

    public function actionUpdate($id)
    {
        $post = Posts::findOne($id);
        if ($post->created_by !== Yii::$app->user->id) {
            Yii::$app->session->setFlash('warning', 'Извините, но мы не нашли что вы хотели');
            return $this->redirect('/site/index');
        }
        $post->setScenario('insert');

        if ($post->load(Yii::$app->request->post()) && $post->save()) {
            return $this->redirect(['view', 'id' => $post->id]);
        }
        return $this->render('update', [
            'model' => $post
        ]);
    }

    public function actionLike($id)
    {
        $params = ['post_id' => $id, 'user_id' => Yii::$app->user->id];
        if ($model = PostLikes::findOne($params)) {
            Yii::$app->response->setStatusCode(404);
            return [
                'likesCount' => Posts::findOne($id)->getLikesCount(),
                'message' => 'bad'
            ];
        } else {
            $model = new PostLikes($params);
            $model->save();
            Yii::$app->response->setStatusCode(201);
            return [
                'likesCount' => Posts::findOne($id)->getLikesCount(),
                'message' => 'good'
            ];
        }
    }

    public function actionUnLike($id)
    {
        $params = ['post_id' => $id, 'user_id' => Yii::$app->user->id];
        if ($model = PostLikes::findOne($params)) {
            $model->delete();
            Yii::$app->response->setStatusCode(201);
            return [
                'likesCount' => Posts::findOne($id)->getLikesCount(),
                'message' => 'good'
            ];
        } else {
            Yii::$app->response->setStatusCode(404);
            return [
                'likesCount' => Posts::findOne($id)->getLikesCount(),
                'message' => 'bad'

            ];
        }

    }
    
    public function actionStar($id)
    {
        
        $params = ['post_id' => $id, 'user_id' => Yii::$app->user->id];
        if ($model = UserSaved::findOne($params)) {
            Yii::$app->response->setStatusCode(404);
        } else {
            $model = new UserSaved($params);
            $model->save();
            Yii::$app->response->setStatusCode(201);
        }
    }

    public function actionUnStar($id)
    {
        
        $params = ['post_id' => $id, 'user_id' => Yii::$app->user->id];
        if ($model = UserSaved::findOne($params)) {
            $model->delete();
            Yii::$app->response->setStatusCode(201);
        } else {
            Yii::$app->response->setStatusCode(404);
        }

    }

    protected function findModel($id)
    {
        if (($model = Posts::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
